<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="19.11.0.0">
<procedure name="main">
<interface/>
<body>
<l>read_image (Image, '//mac/Home/Desktop/virtual_project/Data/BackLight/Image_20200806150403525.bmp')</l>
<l>get_image_size (Image, Width, Height)</l>
<l>count_seconds (StartTime)</l>
<l>gen_TwoCircle_info(Image, MaxCircleRow, MaxCircleColumn, MaxCircleRadius, MinCircleRow, MinCircleColumn, MinCircleRadius, TwoCirclePhi)</l>
<l>gen_L1L2_Measure34 (Image, MinCircleRow, MinCircleColumn, MinCircleRadius, TwoCirclePhi, Width, Height, RightCircleRowEdge1, RightCircleColumnEdge1, LeftCircleRowEdge1, LeftCircleColumnEdge1, RightCircleRowEdge2, RightCircleColumnEdge2, LeftCircleRowEdge2, LeftCircleColumnEdge2)</l>
<c>*分别计算L1、L2的中心坐标</c>
<l>RightCenterRow := (RightCircleRowEdge1+RightCircleRowEdge2)/2</l>
<l>RightCenterCol := (RightCircleColumnEdge1+RightCircleColumnEdge2)/2</l>
<l>LeftCenterRow := (LeftCircleRowEdge1+LeftCircleRowEdge2)/2</l>
<l>LeftCenterCol := (LeftCircleColumnEdge1+LeftCircleColumnEdge2)/2</l>
<c>*显示并计算L1、L2之间距离</c>
<l>distance_pp (RightCenterRow, RightCenterCol, LeftCenterRow, LeftCenterCol, L1_L2)</l>
<c>*定位底部测量矩形</c>
<l>gen_buttom_edge(Image, MaxCircleRow, MaxCircleColumn, MaxCircleRadius*3/2, MaxCircleRadius*3/4, TwoCirclePhi, Width, Height, rad(90), rad(90), MinCircleColumn, MaxCircleColumn, ButtomRowEdge1, ButtomColumnEdge1, ButtomRowEdge2, ButtomColumnEdge2)</l>
<c>*计算L3中心坐标和起点、终点坐标</c>
<l>L3CenterRow := (RightCenterRow + LeftCenterRow)/2</l>
<l>L3CenterCol := (RightCenterCol + LeftCenterCol)/2</l>
<l>L3StartRow := (RightCircleRowEdge1 + LeftCircleRowEdge2)/2</l>
<l>L3StartCol := (RightCircleColumnEdge1 + LeftCircleColumnEdge2)/2</l>
<l>L3EndRow := (RightCircleRowEdge2 + LeftCircleRowEdge1)/2</l>
<l>L3EndCol := (RightCircleColumnEdge2 + LeftCircleColumnEdge1)/2</l>
<c>*计算X1</c>
<l>distance_pl (L3CenterRow, L3CenterCol, ButtomRowEdge1, ButtomColumnEdge1, ButtomRowEdge2, ButtomColumnEdge2, Y1)</l>
<c>*计算运行时间</c>
<l>count_seconds (StopTime)</l>
<c>*输出结果</c>
<l>runtime := (StopTime-StartTime)*1000 </l>
<l>distanceY1 := Y1</l>
<l>distanceL1L2 := L1_L2</l>
<c></c>
<c></c>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="gen_TwoCircle_info">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<oc>
<par name="MaxCircleRow" base_type="ctrl" dimension="0"/>
<par name="MaxCircleColumn" base_type="ctrl" dimension="0"/>
<par name="MaxCircleRadius" base_type="ctrl" dimension="0"/>
<par name="MinCircleRow" base_type="ctrl" dimension="0"/>
<par name="MinCircleColumn" base_type="ctrl" dimension="0"/>
<par name="MinCircleRadius" base_type="ctrl" dimension="0"/>
<par name="TwoCirclePhi" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>fast_threshold (Image, Regions, 128, 255, 20)</l>
<l>connection (Regions, ConnectedRegions)</l>
<c>* 提取两个圆形区域</c>
<l>select_shape (ConnectedRegions, MinCircleSelectedRegions, ['area','circularity'], 'and', [727440,0.8407], [1.22468e+06,1])</l>
<l>select_shape (ConnectedRegions, MaxCircleSelectedRegions, ['area','circularity'], 'and', [1.15101e+06,0.6473], [1.68508e+06,0.837])</l>
<l>inner_circle (MaxCircleSelectedRegions, MaxCircleRow, MaxCircleColumn, MaxCircleRadius)</l>
<l>inner_circle (MinCircleSelectedRegions, MinCircleRow, MinCircleColumn, MinCircleRadius)</l>
<c>* 求两圆心连线方向</c>
<l>line_orientation (MaxCircleRow, MaxCircleColumn, MinCircleRow, MinCircleColumn, TwoCirclePhi)</l>
<l>return ()</l>
</body>
<docu id="gen_TwoCircle_info">
<parameters>
<parameter id="Image"/>
<parameter id="MaxCircleColumn"/>
<parameter id="MaxCircleRadius"/>
<parameter id="MaxCircleRow"/>
<parameter id="MinCircleColumn"/>
<parameter id="MinCircleRadius"/>
<parameter id="MinCircleRow"/>
<parameter id="TwoCirclePhi"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_buttom_edge">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="CenterRow" base_type="ctrl" dimension="0"/>
<par name="CenterCol" base_type="ctrl" dimension="0"/>
<par name="BaseRectDistRow" base_type="ctrl" dimension="0"/>
<par name="BaseRectDistCol" base_type="ctrl" dimension="0"/>
<par name="BasePhi" base_type="ctrl" dimension="0"/>
<par name="ImageWidth" base_type="ctrl" dimension="0"/>
<par name="ImageHeight" base_type="ctrl" dimension="0"/>
<par name="RotatePhi" base_type="ctrl" dimension="0"/>
<par name="RectBasePhi" base_type="ctrl" dimension="0"/>
<par name="MinCircleColumn" base_type="ctrl" dimension="0"/>
<par name="MaxCircleColumn" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="ButtomRowEdge1" base_type="ctrl" dimension="0"/>
<par name="ButtomColumnEdge1" base_type="ctrl" dimension="0"/>
<par name="ButtomRowEdge2" base_type="ctrl" dimension="0"/>
<par name="ButtomColumnEdge2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<l>gen_rectangle2 (Rectangle1, CenterRow+BaseRectDistRow, CenterCol-BaseRectDistCol, RectBasePhi, 100, 50)</l>
<l>gen_rectangle2 (Rectangle2, CenterRow+BaseRectDistRow, CenterCol+BaseRectDistCol, RectBasePhi, 100, 50)</l>
<l>if (MaxCircleColumn &gt; MinCircleColumn)</l>
<l>    vector_angle_to_rigid (CenterRow, CenterCol, -RectBasePhi, CenterRow, CenterCol, BasePhi+RotatePhi, HomMat2D5)</l>
<l>    affine_trans_region (Rectangle1, RectButtomMeasureRectionAffineTrans1, HomMat2D5, 'nearest_neighbor')</l>
<l>    area_center (RectButtomMeasureRectionAffineTrans1, RectButtomMeasureRectArea, RectButtomMeasureRectRow1, RectButtomMeasureRectColumn1)</l>
<l>    orientation_region (RectButtomMeasureRectionAffineTrans1, RectButtomMeasureRectPhi1)</l>
<l>    gen_measure_rectangle2 (RectButtomMeasureRectRow1, RectButtomMeasureRectColumn1, RectButtomMeasureRectPhi1, 100, 50, ImageWidth, ImageHeight, 'bicubic', MeasureHandle5)</l>
<c></c>
<l>    vector_angle_to_rigid (CenterRow, CenterCol, -RectBasePhi, CenterRow, CenterCol, BasePhi+RotatePhi, HomMat2D6)</l>
<l>    affine_trans_region (Rectangle2, ButtomMeasureRectRegionAffineTrans2, HomMat2D6, 'nearest_neighbor')</l>
<l>    area_center (ButtomMeasureRectRegionAffineTrans2, ButtomMeasureRectArea, ButtomMeasureRectRow2, ButtomMeasureRectColumn2)</l>
<l>    orientation_region (ButtomMeasureRectRegionAffineTrans2, ButtomMeasureRectPhi2)</l>
<l>    gen_measure_rectangle2 (ButtomMeasureRectRow2, ButtomMeasureRectColumn2, ButtomMeasureRectPhi2, 100, 50, ImageWidth, ImageHeight, 'bicubic', MeasureHandle6)</l>
<l>else</l>
<l>    vector_angle_to_rigid (CenterRow, CenterCol, -RectBasePhi, CenterRow, CenterCol, BasePhi-RotatePhi, HomMat2D5)</l>
<l>    affine_trans_region (Rectangle1, RectButtomMeasureRectionAffineTrans1, HomMat2D5, 'nearest_neighbor')</l>
<l>    area_center (RectButtomMeasureRectionAffineTrans1, RectButtomMeasureRectArea, RectButtomMeasureRectRow1, RectButtomMeasureRectColumn1)</l>
<l>    orientation_region (RectButtomMeasureRectionAffineTrans1, RectButtomMeasureRectPhi1)</l>
<l>    gen_measure_rectangle2 (RectButtomMeasureRectRow1, RectButtomMeasureRectColumn1, RectButtomMeasureRectPhi1, 100, 50, ImageWidth, ImageHeight, 'bicubic', MeasureHandle5)</l>
<c></c>
<l>    vector_angle_to_rigid (CenterRow, CenterCol, -RectBasePhi, CenterRow, CenterCol, BasePhi-RotatePhi, HomMat2D6)</l>
<l>    affine_trans_region (Rectangle2, ButtomMeasureRectRegionAffineTrans2, HomMat2D6, 'nearest_neighbor')</l>
<l>    area_center (ButtomMeasureRectRegionAffineTrans2, ButtomMeasureRectArea, ButtomMeasureRectRow2, ButtomMeasureRectColumn2)</l>
<l>    orientation_region (ButtomMeasureRectRegionAffineTrans2, ButtomMeasureRectPhi2)</l>
<l>    gen_measure_rectangle2 (ButtomMeasureRectRow2, ButtomMeasureRectColumn2, ButtomMeasureRectPhi2, 100, 50, ImageWidth, ImageHeight, 'bicubic', MeasureHandle6)</l>
<l>endif</l>
<c>* 抓取底部边缘</c>
<l>measure_pos (Image, MeasureHandle5, 1, 30, 'all', 'all', ButtomRowEdge1, ButtomColumnEdge1, ButtomAmplitude, ButtomDistance)</l>
<l>measure_pos (Image, MeasureHandle6, 1, 30, 'all', 'all', ButtomRowEdge2, ButtomColumnEdge2, ButtomAmplitude, ButtomDistance)</l>
<l>close_measure (MeasureHandle5)</l>
<l>close_measure (MeasureHandle6)</l>
<l>return ()</l>
</body>
<docu id="gen_buttom_edge">
<parameters>
<parameter id="BasePhi"/>
<parameter id="BaseRectDistCol"/>
<parameter id="BaseRectDistRow"/>
<parameter id="ButtomColumnEdge1"/>
<parameter id="ButtomColumnEdge2"/>
<parameter id="ButtomRowEdge1"/>
<parameter id="ButtomRowEdge2"/>
<parameter id="CenterCol"/>
<parameter id="CenterRow"/>
<parameter id="Image"/>
<parameter id="ImageHeight"/>
<parameter id="ImageWidth"/>
<parameter id="MaxCircleColumn"/>
<parameter id="MinCircleColumn"/>
<parameter id="RectBasePhi"/>
<parameter id="RotatePhi"/>
</parameters>
</docu>
</procedure>
<procedure name="gen_L1L2_Measure34">
<interface>
<io>
<par name="Image" base_type="iconic" dimension="0"/>
</io>
<ic>
<par name="MinCircleRow" base_type="ctrl" dimension="0"/>
<par name="MinCircleColumn" base_type="ctrl" dimension="0"/>
<par name="MinCircleRadius" base_type="ctrl" dimension="0"/>
<par name="TwoCirclePhi" base_type="ctrl" dimension="0"/>
<par name="Width" base_type="ctrl" dimension="0"/>
<par name="Height" base_type="ctrl" dimension="0"/>
</ic>
<oc>
<par name="RightCircleRowEdge1" base_type="ctrl" dimension="0"/>
<par name="RightCircleColumnEdge1" base_type="ctrl" dimension="0"/>
<par name="LeftCircleRowEdge1" base_type="ctrl" dimension="0"/>
<par name="LeftCircleColumnEdge1" base_type="ctrl" dimension="0"/>
<par name="RightCircleRowEdge2" base_type="ctrl" dimension="0"/>
<par name="RightCircleColumnEdge2" base_type="ctrl" dimension="0"/>
<par name="LeftCircleRowEdge2" base_type="ctrl" dimension="0"/>
<par name="LeftCircleColumnEdge2" base_type="ctrl" dimension="0"/>
</oc>
</interface>
<body>
<c>    *生成基准矩形</c>
<l>    gen_rectangle2 (Rect1,  MinCircleRow-100, MinCircleColumn+MinCircleRadius, 0, 100, 20)</l>
<c>    *生成测量矩形</c>
<l>    vector_angle_to_rigid (MinCircleRow, MinCircleColumn, 0, MinCircleRow, MinCircleColumn, TwoCirclePhi+rad(90), HomMat2D1)</l>
<l>    affine_trans_region (Rect1, RightRect1, HomMat2D1, 'nearest_neighbor')</l>
<l>    area_center (RightRect1, RightRect1Area,RightRect1Row, RightRect1Column)</l>
<l>    orientation_region (RightRect1, RightRect1Phi)</l>
<l>    gen_measure_rectangle2 (RightRect1Row,RightRect1Column, RightRect1Phi, 100, 50, Width, Height, 'bicubic', MeasureHandle1)</l>
<c>    </c>
<l>    vector_angle_to_rigid (MinCircleRow, MinCircleColumn, 0, MinCircleRow, MinCircleColumn, TwoCirclePhi-rad(90), HomMat2D2)</l>
<l>    affine_trans_region (Rect1, LeftRect1, HomMat2D2, 'nearest_neighbor')</l>
<l>    area_center (LeftRect1, LeftRect1Area, LeftRect1Row, LeftRect1Column)</l>
<l>    orientation_region (LeftRect1, LeftRect1Phi)</l>
<l>    gen_measure_rectangle2 (LeftRect1Row, LeftRect1Column, LeftRect1Phi, 100, 50, Width, Height, 'bicubic', MeasureHandle3)</l>
<c>    *生成基准矩形</c>
<l>    gen_rectangle2 (Rect2,  MinCircleRow+100, MinCircleColumn+MinCircleRadius, 0, 100, 20)</l>
<c>    *生成测量矩形</c>
<l>    affine_trans_region (Rect2, RightRect2, HomMat2D1, 'nearest_neighbor')</l>
<l>    area_center (RightRect2, RightRect2Area,RightRect2Row, RightRect2Column)</l>
<l>    orientation_region (RightRect2, RightRect2Phi)</l>
<l>    gen_measure_rectangle2 (RightRect2Row,RightRect2Column, RightRect2Phi, 100, 50, Width, Height, 'bicubic', MeasureHandle2)</l>
<c></c>
<l>    affine_trans_region (Rect2, LeftRect2, HomMat2D2, 'nearest_neighbor')</l>
<l>    area_center (LeftRect2, LeftRect2Area, LeftRect2Row, LeftRect2Column)</l>
<l>    orientation_region (LeftRect2, LeftRect2Phi)</l>
<l>    gen_measure_rectangle2 (LeftRect2Row, LeftRect2Column, LeftRect2Phi, 100, 50, Width, Height, 'bicubic', MeasureHandle4)</l>
<c>    *抓取边缘点</c>
<l>    measure_pos (Image, MeasureHandle1, 1, 30, 'all', 'all', RightCircleRowEdge1, RightCircleColumnEdge1, Amplitude, Distance)</l>
<l>    measure_pos (Image, MeasureHandle3, 1, 30, 'all', 'all', LeftCircleRowEdge1, LeftCircleColumnEdge1, Amplitude, Distance)</l>
<l>    measure_pos (Image, MeasureHandle2, 1, 30, 'all', 'all', RightCircleRowEdge2, RightCircleColumnEdge2, Amplitude, Distance)</l>
<l>    measure_pos (Image, MeasureHandle4, 1, 30, 'all', 'all', LeftCircleRowEdge2, LeftCircleColumnEdge2, Amplitude, Distance)</l>
<l>return ()</l>
</body>
<docu id="gen_L1L2_Measure34">
<parameters>
<parameter id="Height"/>
<parameter id="Image"/>
<parameter id="LeftCircleColumnEdge1"/>
<parameter id="LeftCircleColumnEdge2"/>
<parameter id="LeftCircleRowEdge1"/>
<parameter id="LeftCircleRowEdge2"/>
<parameter id="MinCircleColumn"/>
<parameter id="MinCircleRadius"/>
<parameter id="MinCircleRow"/>
<parameter id="RightCircleColumnEdge1"/>
<parameter id="RightCircleColumnEdge2"/>
<parameter id="RightCircleRowEdge1"/>
<parameter id="RightCircleRowEdge2"/>
<parameter id="TwoCirclePhi"/>
<parameter id="Width"/>
</parameters>
</docu>
</procedure>
</hdevelop>
